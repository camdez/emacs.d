;;; genfoc.el --- thin Emacs wrapper to invoke my genfoc tool of hilarity

;; Copyright (C) 2010  Cameron Desautels
;; Author: Cameron Desautels <camdez@gmail.com>

;;; Commentary:

;; Removed this stuff from init.el because I'm not playing with this
;; tool any more.  Still, might be worth keeping around as an example
;; of how to code these things.

;;; Code:

(defgroup genfoc nil
  "Display randomly generated strings."
  :group 'data)

(defcustom genfoc-location "~/src/my/focus-gen/genfoc"
  "*Location of genfoc executable for displaying random ideas."
  :group 'genfoc
  :type 'string)

(defcustom genfoc-data-file "~/src/my/focus-gen/main.gfd"
  "*Location of main data file for genfoc."
  :group 'genfoc
  :type 'string)

(defun get-genfoc (&optional data-file)
  "Returns an idea, randomly generated by genfoc from the data-file DATA-FILE.\
  Uses default data-file if one is not given."
  (shell-command-to-string
   (concat genfoc-location " < " (or data-file genfoc-data-file) "&")))

(defun display-genfoc ()
  "Displays a randomly generated computer game idea."
  (interactive)
  (message (get-genfoc)))

(defun display-ad-genfoc ()
  "Displays a randomly generated idea from an alternate datafile."
  (interactive)
  (message (get-genfoc "~/src/my/focus-gen/ad.gfd")))

(defun insert-genfoc-at-point ()
  "Inserts a randomly generated computer game idea at point."
  (interactive)
  (insert (get-genfoc)))

(when (require 'genfoc-mode nil t)
  (add-to-list 'auto-mode-alist '("\\.gfd\\'" . genfoc-mode)))

(provide 'genfoc)
;;; genfoc.el ends here
